@using Sandbox;
@using Sandbox.UI;
@using System;
@using System.Threading.Tasks;

@inherits Panel
@namespace HideAndSeek.UI

<root>
    <div class="hs_window">
        <div class="header">
            <div class="search">
                <TextEntry MaxLength="@(20)" class="hs_search_entry" @ref="Entry" onsubmit=@SubmitText></TextEntry>
                <div class="hs_window_input_button" onclick=@SubmitText>Search</div>
            </div>
            <div class="start">
                <div class="hs_window_input_button" onclick=@Play>Play</div>
            </div>
        </div>
        <div class="maps_background">
            <div class="maps">
            @if (MapsFound != null && MapsFound.Length > 0)
            {
                for (int i = 0; i < MapsFound.Length; i++)
                {
                    <div style="flex-direction: column;">
                        <button class="map_element" id=@(i.ToString()) onclick=@(x => {Select(x.Target);} ) style="background-image: url(@MapsFound[i].Thumb);"></button>
                        <div style="width:100%; justify-content: center; align-self: center;  background-color: #000000e0; margin: 0.1vh 0 0 0">
                            <p style="font-size: 1.25vh; color: white; max-width: 85%; white-space: nowrap; text-overflow: ellipsis;">@(MapsFound[i].Ident)</p>
                        </div>
                    </div>
                }
            }
            </div>
        </div>
    </div>
</root>

@code
{
    private Package[] MapsFound;
    private TextEntry Entry;
    private string MapQuery;
    public string SelectedMap { get; private set; }
    private Task _querying;
    private Panel PrevButton;
    public Action Play;

    private void SubmitText()
    {
        if (Entry != null)
        {
            MapQuery = Entry.Value;
            if (_querying is not null && !_querying.IsCompleted)
            {
                Log.Warning("Maps are still querying");
                return;
            }
            _querying = FetchMaps(MapQuery);
            //Log.Info(MapQuery);
        }
    }

    private void Select(Panel button)
    {
        if (PrevButton != null)
        {
            PrevButton.Style.BorderWidth = Length.ViewHeight(0);
            PanelTransform scale = new();
            scale.AddScale(1f);
            PrevButton.Style.Transform = scale;
            PrevButton.Style.BoxShadow.Clear();
        }
        if (PrevButton == button)
        {
            PrevButton = null;
            SelectedMap = "";
            return;
        }
        else
        {
            SelectedMap = MapsFound[Convert.ToInt32(button.Id)].FullIdent;
            Log.Info(SelectedMap);
            button.Style.BorderWidth = Length.ViewHeight(1);
            //button.Style.BoxShadow.Add(new Shadow() { Color = Color.White, OffsetX = 0, OffsetY = 0, Blur = 2, Spread = 1 });
            // PanelTransform scale = new();
            // scale.AddScale(.95f);
            // button.Style.Transform = scale;
            PrevButton = button;
            Clipboard.SetText(SelectedMap);
        }
    }

    private async Task FetchMaps(string query = "")
    {
        string searchMap = "type:map " + query;
        var found = await Package.FindAsync(searchMap);
        MapsFound = found.Packages;
        StateHasChanged();
        Log.Info("Maps found: " + MapsFound.Length);
    }

    //protected override int BuildHash() => System.HashCode.Combine(Entry);

}
